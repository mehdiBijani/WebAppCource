// <auto-generated />
using System;
using EfCore_DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCore_Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EfCore_Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookDetail_id_fk")
                        .HasColumnType("int");

                    b.Property<int>("Category_id_fk")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Publisher_id_fk")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("BookDetail_id_fk")
                        .IsUnique()
                        .HasFilter("[BookDetail_id_fk] IS NOT NULL");

                    b.HasIndex("Category_id_fk");

                    b.HasIndex("Publisher_id_fk");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EfCore_Domain.Models.BookAuthor", b =>
                {
                    b.Property<int>("Author_id_fk")
                        .HasColumnType("int");

                    b.Property<int>("Book_id_fk")
                        .HasColumnType("int");

                    b.HasKey("Author_id_fk", "Book_id_fk");

                    b.HasIndex("Book_id_fk");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("EfCore_Domain.Models.BookDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("EfCore_Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FluentAuthors");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookDetail_id_fk")
                        .HasColumnType("int");

                    b.Property<int>("Category_id_fk")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Publisher_id_fk")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("BookDetail_id_fk")
                        .IsUnique()
                        .HasFilter("[BookDetail_id_fk] IS NOT NULL");

                    b.HasIndex("Category_id_fk");

                    b.HasIndex("Publisher_id_fk");

                    b.ToTable("FluentBooks");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Author_id_fk")
                        .HasColumnType("int");

                    b.Property<int>("Book_id_fk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Author_id_fk");

                    b.HasIndex("Book_id_fk");

                    b.ToTable("FluentBookAuthors");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBookDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FluentBookDetails");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FluentCategories");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentPublisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("FluentPublishers");
                });

            modelBuilder.Entity("EfCore_Domain.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EfCore_Domain.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("EfCore_Domain.Models.Book", b =>
                {
                    b.HasOne("EfCore_Domain.Models.BookDetail", "BookDetail")
                        .WithOne("Book")
                        .HasForeignKey("EfCore_Domain.Models.Book", "BookDetail_id_fk");

                    b.HasOne("EfCore_Domain.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Category_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCore_Domain.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisher_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookDetail");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EfCore_Domain.Models.BookAuthor", b =>
                {
                    b.HasOne("EfCore_Domain.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("Author_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCore_Domain.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("Book_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBook", b =>
                {
                    b.HasOne("EfCore_Domain.Models.FluentBookDetail", "BookDetail")
                        .WithOne("Book")
                        .HasForeignKey("EfCore_Domain.Models.FluentBook", "BookDetail_id_fk");

                    b.HasOne("EfCore_Domain.Models.FluentCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Category_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCore_Domain.Models.FluentPublisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisher_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookDetail");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBookAuthor", b =>
                {
                    b.HasOne("EfCore_Domain.Models.FluentAuthor", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("Author_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCore_Domain.Models.FluentBook", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("Book_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EfCore_Domain.Models.BookDetail", b =>
                {
                    b.Navigation("Book")
                        .IsRequired();
                });

            modelBuilder.Entity("EfCore_Domain.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentAuthor", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBook", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentBookDetail", b =>
                {
                    b.Navigation("Book")
                        .IsRequired();
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EfCore_Domain.Models.FluentPublisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EfCore_Domain.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
